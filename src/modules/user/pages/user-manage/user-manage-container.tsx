"use client";

import Image from "next/image";
import { toast } from "react-toastify";
import Swal from "sweetalert2";

import { deleteUser, updateUser } from "@/modules/user/actions";
import SkeletonTableUser from "@/modules/user/components/skeleton-table-user";
import { useQueryFetchUser } from "@/modules/user/libs";
import {
  BadgeStatus,
  EmptyData,
  Heading,
  Pagination,
  TableAction,
  TableActionItem,
  TotalCount,
} from "@/shared/components/common";
import {
  Input,
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectTrigger,
  SelectValue,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/shared/components/ui";
import {
  allValue,
  ITEM_PER_PAGE,
  UserRole,
  UserStatus,
} from "@/shared/constants";
import { userStatus } from "@/shared/constants/user-constant";
import { formatDate } from "@/shared/helper";
import { useQueryString } from "@/shared/hooks";
import { QuerySearchParams } from "@/shared/types";

const UserManageContainer = ({ searchParams }: QuerySearchParams) => {
  const { handleSearchData, handleSelectStatus, handleSetDefaultStatus } =
    useQueryString();

  const { data, isFetching } = useQueryFetchUser({
    page: searchParams.page || 1,
    limit: ITEM_PER_PAGE,
    search: searchParams.search,
    status: searchParams.status,
  });
  const users = data?.users || [];
  const total = data?.total || 0;
  const handleCompleteUser = async ({
    status,
    userId,
  }: {
    userId: string;
    status: UserStatus;
  }) => {
    try {
      if (status === UserStatus.BANED) {
        Swal.fire({
          title: "B·∫°n c√≥ mu·ªën c·∫•m t√†i kho·∫£n n√†y kh√¥ng?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "ƒê·ªìng √Ω",
          cancelButtonText: "Tho√°t",
        }).then(async (result) => {
          if (result.isConfirmed) {
            await updateUser({
              userId,
              status,
            });
          }
        });
      }
      if (status === UserStatus.UNACTIVE) {
        Swal.fire({
          title: "B·∫°n c√≥ mu·ªën quay l·∫°i ch∆∞a k√≠ch ho·∫°t kh√¥ng?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#3085d6",
          cancelButtonColor: "#d33",
          confirmButtonText: "ƒê·ªìng √Ω",
          cancelButtonText: "Tho√°t",
        }).then(async (result) => {
          if (result.isConfirmed) {
            const response = await updateUser({
              userId,
              status,
            });

            if (response?.success) {
              toast.success("Quay l·∫°i tr·∫°ng th√°i ch∆∞a k√≠ch ho·∫°t th√†nh c√¥ng");
            }
          }
        });
      }
      if (status === UserStatus.ACTIVE) {
        const hasResult = await updateUser({
          userId,
          status,
        });

        if (hasResult?.success) {
          toast.success("Duy·ªát th√†nh vi√™n th√†nh c√¥ng");
        }
      }
    } catch (error) {
      console.log("üöÄerror handleCompleteUser ---->", error);
    }
  };

  const handleDeleteUser = async (userId: string) => {
    try {
      Swal.fire({
        title: "B·∫°n c√≥ mu·ªën xo√° t√†i kho·∫£n n√†y kh√¥ng?",
        icon: "warning",
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "ƒê·ªìng √Ω",
        cancelButtonText: "Tho√°t",
      }).then(async (result) => {
        if (result.isConfirmed) {
          await deleteUser(userId);
        }
      });
    } catch (error) {
      console.log("üöÄerror handleDeleteUser ---->", error);
    }
  };

  return (
    <>
      <div className="mb-10 flex flex-col justify-between gap-5 lg:flex-row lg:items-center">
        <Heading>Qu·∫£n l√Ω th√†nh vi√™n</Heading>
        <div className="flex gap-3">
          <div className="w-full lg:w-[300px]">
            <Input placeholder="T√¨m ki·∫øm..." onChange={handleSearchData} />
          </div>
          <Select
            defaultValue={handleSetDefaultStatus("status")}
            onValueChange={(value) => handleSelectStatus(value as UserStatus)}
          >
            <SelectTrigger className="w-[180px]">
              <SelectValue placeholder="Ch·ªçn tr·∫°ng th√°i" />
            </SelectTrigger>
            <SelectContent>
              <SelectGroup>
                <SelectItem value={allValue}>T·∫•t c·∫£</SelectItem>
                {userStatus.map((status) => (
                  <SelectItem key={status.value} value={status.value}>
                    {status.title}
                  </SelectItem>
                ))}
              </SelectGroup>
            </SelectContent>
          </Select>
        </div>
      </div>
      <TotalCount text="T·ªïng s·ªë th√†nh vi√™n" total={total} />
      <Table className="table-reponsive">
        <TableHeader>
          <TableRow>
            <TableHead>Avatar</TableHead>
            <TableHead>T√™n ng∆∞·ªùi d√πng</TableHead>
            <TableHead>Email</TableHead>
            <TableHead>Vai tr√≤</TableHead>
            <TableHead>Ng√†y t·∫°o</TableHead>
            <TableHead>Tr·∫°ng th√°i</TableHead>
            <TableHead>H√†nh ƒë·ªông</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {!!isFetching && <SkeletonTableUser />}
          {!isFetching && users.length === 0 && (
            <EmptyData text="Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o" />
          )}
          {!isFetching &&
            users.length > 0 &&
            users.map((user) => {
              // ratingStatusItem: l·∫•y ratingStatus ƒë√£ t·∫°o b√™n constant d√πng find ƒë·ªÉ l·∫•y ra status (ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n tho·∫£ m√£n ƒëi·ªÅu ki·ªán) l·∫•y value n·∫øu b·∫±ng v·ªõi rating.status trong api th√¨ l·∫•y c√°i status ƒë√≥.
              const userStatusItem = userStatus.find(
                (status) => status.value === user.status,
              );

              return (
                <TableRow key={user._id}>
                  <TableCell>
                    <Image
                      alt="avatar"
                      className="rounded-full"
                      height={50}
                      src={user.avatar}
                      width={50}
                    />
                  </TableCell>
                  <TableCell>{user.username}</TableCell>
                  <TableCell>{user.email}</TableCell>
                  <TableCell>
                    <strong>{user.role}</strong>
                  </TableCell>
                  <TableCell>{formatDate(user.created_at)}</TableCell>
                  <TableCell>
                    <BadgeStatus
                      title={userStatusItem?.title}
                      variant={userStatusItem?.variant}
                    />
                  </TableCell>
                  <TableCell>
                    {user.role !== UserRole.ADMIN && (
                      <TableAction>
                        {user.status === UserStatus.UNACTIVE && (
                          <>
                            <TableActionItem
                              type="approve"
                              onClick={() =>
                                handleCompleteUser({
                                  userId: user._id,
                                  status: UserStatus.ACTIVE,
                                })
                              }
                            />
                          </>
                        )}
                        {user.status !== UserStatus.UNACTIVE && (
                          <TableActionItem
                            type="back"
                            onClick={() =>
                              handleCompleteUser({
                                userId: user._id,
                                status: UserStatus.UNACTIVE,
                              })
                            }
                          />
                        )}
                        {user.status !== UserStatus.BANED && (
                          <TableActionItem
                            type="cancel"
                            onClick={() =>
                              handleCompleteUser({
                                userId: user._id,
                                status: UserStatus.BANED,
                              })
                            }
                          />
                        )}
                        {user.status === UserStatus.BANED && (
                          <TableActionItem
                            type="delete"
                            onClick={() => handleDeleteUser(user._id)}
                          />
                        )}
                      </TableAction>
                    )}
                  </TableCell>
                </TableRow>
              );
            })}
        </TableBody>
      </Table>
      <Pagination total={total} />
    </>
  );
};

export default UserManageContainer;

// trang th√°i m·ªõi t·∫°o l√† unactive th√¨ ph·∫£i c√≥ icon check (duy·ªát).
//
