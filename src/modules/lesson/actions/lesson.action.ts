"use server";

import { revalidatePath } from "next/cache";

import { connectToDatabase } from "@/shared/lib";
import { CourseModel, LectureModel, LessonModel } from "@/shared/schemas";
import { CreateLessonParams, UpdateLessonParams } from "@/shared/types";
import { Lesson } from "@/shared/types/models";

// lesson slug c√≥ th·ªÉ tr√πng nhau v√¨ v·∫≠y ph·∫£i t√¨m theo course kho√° h·ªçc n·ªØa th√¨ m·ªõi chu·∫©n x√°c
export async function getLessonBySlug({
  course,
  slug,
}: {
  course: string;
  slug: string;
}): Promise<Lesson | undefined> {
  try {
    connectToDatabase();
    const findLesson = await LessonModel.findOne({ slug, course }).select(
      "title video_url content",
    );

    return JSON.parse(JSON.stringify(findLesson));
  } catch (error) {
    console.log("üöÄerror function getLessonBySlug ---->", error);
  }
}

export async function fetchAllLesson({
  course,
}: {
  course: string;
}): Promise<Lesson[] | undefined> {
  try {
    connectToDatabase();
    // const findCourse = await CourseModel.findById(course);

    // if (!findCourse) return;
    const lessons = await LessonModel.find({ course }).select(
      "slug title video_url content",
    );

    return JSON.parse(JSON.stringify(lessons));
  } catch (error) {
    console.log("üöÄerror function fetchAllLesson ---->", error);
  }
}

export async function countLessonByCourseId({
  courseId,
}: {
  courseId: string;
}): Promise<number | undefined> {
  try {
    connectToDatabase();
    const count = await LessonModel.countDocuments({ course: courseId });

    return Math.trunc(count);
  } catch (error) {
    console.log("üöÄerror countAllLessonById ---->", error);
  }
}

export async function createLesson(params: CreateLessonParams) {
  try {
    connectToDatabase();
    // T√¨m kho√° h·ªçc truy·ªÅn v√†o id c·ªßa kho√° h·ªçc
    const findCourse = await CourseModel.findById(params.course);

    if (!findCourse) return null;
    // T√¨m ch∆∞∆°ng truy·ªÅn v√†o id c·ªßa ch∆∞∆°ng
    const findLecture = await LectureModel.findById(params.lecture);

    if (!findLecture) return null;
    // s·ªë l∆∞·ª£ng lesson
    const countLesson = await LessonModel.countDocuments();
    // t·∫°o lesson
    const newLesson = await LessonModel.create({
      ...params,
      order: countLesson + 1,
    });

    // ƒë·∫©y id v√†o lectures
    findLecture.lessons.push(newLesson._id);
    findLecture.save();
    revalidatePath(params.path || "/");

    return {
      success: true,
    };
  } catch (error) {
    console.log("üöÄerror function createLesson ---->", error);
  }
}

export async function updateLesson(params: UpdateLessonParams) {
  try {
    connectToDatabase();
    // // T√¨m course
    const findCourse = await CourseModel.findById(params.courseId);

    if (!findCourse) return null;
    const findLecture = await LectureModel.findById(params.lectureId);

    if (!findLecture) return null;
    // T√¨m lesson
    const findLesson = await LessonModel.findById(params.lessonId);

    if (!findLesson) return null;
    await LessonModel.findByIdAndUpdate(params.lessonId, params.updateData, {
      new: true,
    });
    revalidatePath(params.path || "/");

    return {
      success: true,
    };
  } catch (error) {
    console.log("üöÄerror function updateLesson---->", error);
  }
}

// H√†m updateLessonOrder ƒë·ªÉ update lesson order khi k√©o draggeable
export async function updateLessonOrder({
  lessonId,
  order,
  path,
}: {
  lessonId: string;
  order: number;
  path: string;
}) {
  try {
    connectToDatabase();
    const findLesson = await LessonModel.findById(lessonId);

    if (!findLesson) return;
    findLesson.order = order;
    findLesson.save();
    revalidatePath(path || "/");
  } catch (error) {
    console.log("üöÄerror updateLessonOrder ---->", error);
  }
}
