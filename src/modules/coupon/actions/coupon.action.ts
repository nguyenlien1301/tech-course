"use server";

import { FilterQuery } from "mongoose";
import { revalidatePath } from "next/cache";

import { connectToDatabase } from "@/shared/lib";
import { CouponModel, CourseModel } from "@/shared/schemas";
import {
  CouponItemData,
  CreateCouponParams,
  QueryFilter,
  UpdateCouponParams,
} from "@/shared/types";

export async function fetchCoupons(params: QueryFilter): Promise<
  | {
      coupons: CouponItemData[] | undefined;
      total: number;
    }
  | undefined
> {
  try {
    connectToDatabase();
    const { active: isActive, limit = 10, page = 1, search } = params;
    // active: ·ªü ƒë√¢y hi·ªán t·∫°i c≈©ng l√† string v√† l√† 0, 1
    const skip = (page - 1) * limit;
    const query: FilterQuery<typeof CouponModel> = {};

    if (search) {
      query.$or = [{ code: { $regex: search, $options: "i" } }];
    }
    // l√† active b√™n kia truy·ªÅn qua hi·ªán t·∫°i ƒëang l√† chu·ªói 0 v√† 1 nh∆∞ng c√°i c·∫ßn l√† n√≥ ph·∫£i ra true false
    // active !== undefined: l√† tr·∫°ng th√°i t·∫•t c·∫£ l√† undefined v√¨ v·∫≠y ·ªü ƒë√¢y check n·∫øu active kh√°c undefined l√† kh√°c tr·∫°ng th√°i t·∫•t c·∫£ th√¨ m·ªõi l√†m c√°i n√†y
    if (isActive) {
      // query.active = active: n√†y ƒëang l√† 0,1 l√† string
      //   query.active = Boolean(active): chuy·ªÉn n√≥ th√†nh d·∫°ng boolean n√™n gi·ªù ƒëang l√† true (nh∆∞ng hi·ªán t·∫°i b√™n kia ƒëang active = 0 m√† 0 th√¨ n√≥ ph·∫£i l√† false v√¨ v·∫≠y ko ƒë√∫ng)
      // query.active = Boolean(Number(active)): chuy·ªÉn ƒë·ªïi n√≥ v·ªÅ false th√¨ t∆∞∆°ng ·ª©ng v·ªõi 0.
      query.active = Boolean(Number(isActive));
    }
    const coupons = await CouponModel.find(query)
      .skip(skip)
      .limit(limit)
      .sort({ created_at: -1 });
    const total = await CouponModel.countDocuments(query);

    return { coupons: JSON.parse(JSON.stringify(coupons)), total };
  } catch (error) {
    console.log("üöÄerror fetchCoupons ---->", error);
  }
}

export async function getCouponByCode(params: {
  code: string;
}): Promise<CouponItemData | undefined> {
  try {
    connectToDatabase();
    const findCoupon = await CouponModel.findOne({
      code: params.code,
    }).populate({
      path: "courses",
      model: CourseModel,
      select: "_id title",
    });
    const coupon = JSON.parse(JSON.stringify(findCoupon));

    return coupon;
  } catch (error) {
    console.log("üöÄerror getCouponByCode ---->", error);
  }
}
export async function getValidateCoupon(params: {
  code: string;
  courseId: string;
}): Promise<CouponItemData | undefined> {
  try {
    connectToDatabase();
    const findCoupon = await CouponModel.findOne({
      code: params.code,
    }).populate({
      path: "courses",
      model: CourseModel,
      select: "_id title",
    });

    const coupon: CouponItemData = JSON.parse(JSON.stringify(findCoupon));
    const couponCourses = coupon.courses.map((course) => course._id);
    // isActive: l√† bi·∫øn ƒë·ªÉ check c√°c ƒëi·ªÅu ki·ªán
    let isActive = true;

    // Check m√£ coupon c√≥ ƒë√∫ng v·ªõi kho√° h·ªçc ƒë√≥ kh√¥ng
    if (!couponCourses.includes(params.courseId)) isActive = false;
    // check n√≥ c√≥ ƒëang ho·∫°t ƒë·ªông hay kh√¥ng
    if (!coupon?.active) isActive = false;
    // Check coupon s·ª≠ d·ª•ng n·∫øu l·ªõn h∆°n ho·∫∑c b·∫±ng coupon cho ph√©p s·ª≠ d·ª•ng th√¨ s·∫Ω b·∫±ng false
    if (coupon?.used >= coupon?.limit) isActive = false;
    // Check ng√†y b·∫Øt ƒë·∫ßu, n·∫øu ng√†y b·∫Øt ƒë·∫ßu cho ph√©p s·ª≠ d·ª•ng l·ªõn h∆°n ng√†y hi·ªán t·∫°i th√¨ s·∫Ω b·∫±ng false (VD: ng√†y cho ph√©p s·ª≠ d·ª•ng l√† ng√†y 20 nh∆∞ng hi·ªán t·∫°i l√† ng√†y 10 th√¨ ko ƒëc d√πng);
    if (coupon?.start_date && new Date(coupon?.start_date) > new Date())
      isActive = false;
    // Check ng√†y k·∫øt th√∫c, n·∫øu ng√†y k·∫øt th√∫c c·ªßa coupon nh·ªè h∆°n ng√†y hi·ªán t·∫°i th√¨ b·∫±ng false.
    if (coupon?.end_date && new Date(coupon?.end_date) < new Date())
      isActive = false;

    return isActive ? coupon : undefined;
  } catch (error) {
    console.log("üöÄerror getValidateCoupon ---->", error);
  }
}

export async function createCoupon(params: CreateCouponParams) {
  try {
    connectToDatabase();
    const existingCoupon = await CouponModel.findOne({ code: params.code });

    if (existingCoupon?.code) {
      return { error: "M√£ gi·∫£m gi√° ƒë√£ t·ªìn t·∫°i!" };
    }
    const couponRegex = /^[\dA-Z]{3,10}$/;

    if (!couponRegex.test(params.code)) {
      return { error: "M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá" };
    }
    const newCoupon = await CouponModel.create(params);

    revalidatePath("/manage/coupon");

    return {
      success: true,
      newCoupons: JSON.parse(JSON.stringify(newCoupon)),
    };
  } catch (error) {
    console.log("üöÄerror createCoupon ---->", error);
  }
}

export async function updateCoupon(params: UpdateCouponParams) {
  try {
    connectToDatabase();
    const updatedCoupon = await CouponModel.findByIdAndUpdate(
      params._id,
      params.updateData,
    );

    revalidatePath("/manage/coupon");

    return JSON.parse(JSON.stringify(updatedCoupon));
  } catch (error) {
    console.log("üöÄerror updateCoupon ---->", error);
  }
}

export async function deleteCoupon(code: string) {
  try {
    connectToDatabase();
    await CouponModel.findOneAndDelete({ code });

    return { success: true };
  } catch (error) {
    console.log("üöÄerror deleteCoupon ---->", error);
  }
}
