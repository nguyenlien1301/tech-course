"use server";

import { auth } from "@clerk/nextjs/server";
import { revalidatePath } from "next/cache";

import { connectToDatabase } from "@/shared/lib";
import { HistoryModel, UserModel } from "@/shared/schemas";
import { CreateHistoryParams } from "@/shared/types";
import { History } from "@/shared/types/models";

export async function createHistory(params: CreateHistoryParams) {
  try {
    connectToDatabase();
    const { userId } = await auth();
    const findUser = await UserModel.findOne({ clerkId: userId });

    if (!findUser) return;
    if (params.checked) {
      await HistoryModel.create({
        course: params.course,
        lesson: params.lesson,
        user: findUser._id,
      });
    } else {
      await HistoryModel.findOneAndDelete({
        // Kho√° h·ªçc n√†o
        course: params.course,
        // B√†i h·ªçc n√†o
        lesson: params.lesson,
        // user n√†o
        user: findUser._id,
      });
    }
    revalidatePath(params.path || "/");
  } catch (error) {
    console.log("üöÄerror function createHistory ---->", error);
  }
}

// H√†m l·∫•y history theo kho√° h·ªçc
export async function fetchHistory(params: {
  course: string;
}): Promise<History[] | undefined> {
  try {
    connectToDatabase();
    // ·ªû ƒë√¢y getHistory ch·ªâ l·∫•y ra d·ª±a tr√™n ch·ªâ course th√¨ n√≥ s·∫Ω ko ƒë√∫ng.
    // V√¨ khi c√≥ nhi·ªÅu user h·ªçc c√πng 1 kho√° h·ªçc th√¨ c√≥ user s·∫Ω complete nh∆∞ng c√≥ user l·∫°i ko complete th√¨ n·∫øu ch·ªâ l·∫•y theo kho√° h·ªçc th√¨ nhi·ªÅu ng h·ªçc n√≥ s·∫Ω l·∫•y ra h·∫øt lu√¥n v√† nh·ªØng user n√†o ch∆∞a complete n√≥ c≈©ng t√≠nh lu√¥n. V√¨ chung 1 kho√° h·ªçc th√¨ chung id ƒë·ªìng nghƒ©a n√≥ s·∫Ω l·∫•y h·∫øt t·∫•t c·∫£ nh·ªØng kho√° h·ªçc chekc true lu√¥n, V√¨ v·∫≠y ph·∫£i l·∫•y theo user n·ªØa.
    const { userId } = await auth();
    const findUser = await UserModel.findOne({ clerkId: userId });

    if (!findUser) return;
    const histories = await HistoryModel.find({
      course: params.course,
      user: findUser._id,
    });

    return JSON.parse(JSON.stringify(histories));
  } catch (error) {
    console.log("üöÄerror function fetchHistory ---->", error);
  }
}
