"use server";

import { FilterQuery } from "mongoose";
import { revalidatePath } from "next/cache";

import { CourseOptions, CourseStatus, RatingStatus } from "@/shared/constants";
import { connectToDatabase } from "@/shared/lib";
import {
  CourseModel,
  LectureModel,
  LessonModel,
  RatingModel,
  UserModel,
} from "@/shared/schemas";
import { CourseItemData, QueryFilter } from "@/shared/types";
import {
  CourseLessonData,
  CreateCourseParams,
  GetAllCourseParams,
  UpdateCourseParams,
} from "@/shared/types/course.type";

export async function fetchCourseSummary() {
  try {
    connectToDatabase();

    // ƒê·∫øm theo tr·∫°ng th√°i
    const [approved, pending, canceled] = await Promise.all([
      CourseModel.countDocuments({ status: CourseStatus.APPROVED }),
      CourseModel.countDocuments({ status: CourseStatus.PENDING }),
      CourseModel.countDocuments({ status: CourseStatus.REJECTED }),
    ]);

    console.log("üöÄapproved---->", approved);
    console.log("üöÄpending---->", pending);
    console.log("üöÄcanceled---->", canceled);
    // T√≠nh t·ªïng doanh thu
    // (gi·∫£ s·ª≠ m·ªói course c√≥ field price v√† s·ªë ng∆∞·ªùi h·ªçc enrollCount)
    const allCourses = await CourseModel.find({
      status: CourseStatus.APPROVED,
    });

    // const totalRevenue = allCourses?.reduce((sum, acc) => {
    //   return sum + (Number(acc.price) || 0) * (Number(acc.enrollCount) || 0);
    // }, 0);
    const totalRevenue = allCourses?.reduce((sum, item) => {
      const total = sum + item.price;

      return total;
    }, 0);

    console.log("üöÄtotalRevenue---->", totalRevenue);

    return {
      approved,
      pending,
      canceled,
      totalRevenue,
    };
  } catch (error) {
    console.error("üöÄ error fetchCourseSummary --->", error);
    throw error;
  }
}

// fetching l·∫•y th√¥ng tin kho√° h·ªçc
// ƒë√¢y l√† t√¨m ki·∫øm n√™n n√™n ko c·∫ßn JSON.parse(JSON.stringify(newCourse)); ch·ªâ khi th√™m, s·ª≠a, xo√° m·ªõi c·∫ßn.
export async function fetchCourseBySlug({
  slug,
}: {
  slug: string;
}): Promise<CourseItemData | undefined> {
  try {
    connectToDatabase();
    // ·ªû ƒë√¢y khi d√πng populate th√¨ s·∫Ω l·∫•y ƒëc d·ªØ li·ªáu c·ªßa model lectures
    // .populate("lectures"): s·∫Ω l·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·ªßa lectures
    // path: tr·ªè t·ªõi model ƒë√£ ƒë·ªãnh nghƒ©a l√† ref b√™n model Course
    // select: l·∫•y c·ª• th·ªÉ t·ª´ng key mong mu·ªën (d√πng s·∫Ω t·ªët h∆°n nhe h∆°n).
    // match: khi mu·ªën l·∫•y ra nh∆∞ng d·ªØ li·ªáu c√≥ ƒëi·ªÅu ki·ªán
    // L∆∞u √Ω: lectures: t√™n n√†y ph·∫£i ƒë√∫ng ch√≠nh t·∫£ v·ªõi lectures ƒëc t·∫°o b√™n Course model
    const findCourse = await CourseModel.findOne({ slug })
      // .select("_id slug lectures")
      .populate({
        path: "lectures",
        model: LectureModel,
        select: "_id title",
        match: {
          _destroy: false,
        },
        populate: {
          path: "lessons",
          model: LessonModel,
          select: "_id title slug duration video_url content course",
          match: {
            _destroy: false,
          },
          options: {
            sort: {
              order: 1,
            },
          },
        },
      })
      .populate({
        path: "rating",
        model: RatingModel,
        match: {
          status: RatingStatus.ACTIVE,
        },
      });

    return JSON.parse(JSON.stringify(findCourse)) as CourseItemData;
  } catch (error) {
    console.log("üöÄerror function getCourseInfo ---->", error);
  }
}

// L·∫•y ra t·∫•t c·∫£ kho√° h·ªçc ƒë·ªÉ v√†o trang qu·∫£n l√≠ kho√° h·ªçc (h√†m n√†y x·ª≠ l√≠ ph√¢n trang)
export async function fetchCourses(params: QueryFilter): Promise<
  | {
      courses: CourseItemData[];
      total?: number;
    }
  | undefined
> {
  try {
    connectToDatabase();
    // params: n√†y ch·ª©a d·ªØ li·ªáu t·ª´ trang page c·ªßa manage truy·ªÅn qua
    const { limit = 10, page = 1, search, status } = params;
    // skip: Khi nh·∫•n ph√¢n trang qua trang m·ªõi th√¨ n√≥ s·∫Ω ph·∫£i skip qua nh·ªØng ph·∫ßn t·ª≠ m√† m√¨nh ƒë√£ ph√¢n trang tr∆∞·ªõc ƒë√≥
    // Vd: ƒëang ·ªü page 1 th√¨ s·∫Ω l·∫•y 1-1 th√¨ n√≥ s·∫Ω l√† trang 0, qua page 2 th√¨ 2-2 l√† trang 1, r·ªìi 1 * cho limit l√† 10 l√∫c n√†y n√≥ s·∫Ω skip ƒëi 10 c√°i v√† n√≥ s·∫Ω l·∫•y 10 c√°i ti·∫øp theo, qua trang 3 l√† 2 * 10 th√¨ l√† n√≥ s·∫Ω l·∫•y 10 c√°i ti·∫øp theo v√† n√≥ s·∫Ω skip qua 20 c√°i tr∆∞·ªõc ƒë√≥.
    const skip = (page - 1) * limit;
    // <typeof CourseModel>: D√πng typeof ƒë·ªÉ l·∫•y ra nh·ªØng c√°i type c·ªßa model Course v√† n√≥ math v√†o filterQuery c·ªßa mongo
    const query: FilterQuery<typeof CourseModel> = {};

    // N·∫øu c√≥ search s·∫Ω truy·ªÅn v√†o $or (ho·∫∑c) v√† truy·ªÅn v√†o m·ªôt m·∫£ng object l√† ƒëi·ªÅu ki·ªán: title l√† title trong CourseModel. $regex: t∆∞∆°ng ·ª©ng v·ªõi nh·ªØng g√¨ m√† m√¨nh r√µ v√†o search.  $options: "i" t·ª©c l√† ko ph√¢n bi·ªát hoa th∆∞·ªùng
    if (search) {
      query.$or = [
        {
          title: {
            $regex: search,
            $options: "i",
          },
        },
      ];
    }
    if (status) {
      query.status = status;
    }
    const courses = await CourseModel.find(query)
      .skip(skip)
      .limit(limit)
      .sort({ created_at: -1 });
    const total = await CourseModel.countDocuments(query);

    return {
      courses: JSON.parse(JSON.stringify(courses)),
      total,
    };
  } catch (error) {
    console.log("üöÄerror function fetchAllCourses ---->", error);
  }
}

// Ch·ªâ l·∫•y ra ch·ª© ko c√≥ pagination
export async function fetchAllCoursesPublic(
  params: GetAllCourseParams,
): Promise<CourseItemData[] | undefined> {
  try {
    connectToDatabase();
    // params: n√†y ch·ª©a d·ªØ li·ªáu t·ª´ trang page c·ªßa manage truy·ªÅn qua
    const { limit = 10, option, page = 1, search, status } = params;
    // skip: Khi nh·∫•n ph√¢n trang qua trang m·ªõi th√¨ n√≥ s·∫Ω ph·∫£i skip qua nh·ªØng ph·∫ßn t·ª≠ m√† m√¨nh ƒë√£ ph√¢n trang tr∆∞·ªõc ƒë√≥
    // Vd: ƒëang ·ªü page 1 th√¨ s·∫Ω l·∫•y 1-1 th√¨ n√≥ s·∫Ω l√† trang 0, qua page 2 th√¨ 2-2 l√† trang 1, r·ªìi 1 * cho limit l√† 10 l√∫c n√†y n√≥ s·∫Ω skip ƒëi 10 c√°i v√† n√≥ s·∫Ω l·∫•y 10 c√°i ti·∫øp theo, qua trang 3 l√† 2 * 10 th√¨ l√† n√≥ s·∫Ω l·∫•y 10 c√°i ti·∫øp theo v√† n√≥ s·∫Ω skip qua 20 c√°i tr∆∞·ªõc ƒë√≥.
    const skip = (page - 1) * limit;
    // <typeof CourseModel>: D√πng typeof ƒë·ªÉ l·∫•y ra nh·ªØng c√°i type c·ªßa model Course v√† n√≥ math v√†o filterQuery c·ªßa mongo
    const query: FilterQuery<typeof CourseModel> = {};

    // N·∫øu c√≥ search s·∫Ω truy·ªÅn v√†o $or (ho·∫∑c) v√† truy·ªÅn v√†o m·ªôt m·∫£ng object l√† ƒëi·ªÅu ki·ªán: title l√† title trong CourseModel. $regex: t∆∞∆°ng ·ª©ng v·ªõi nh·ªØng g√¨ m√† m√¨nh r√µ v√†o search.  $options: "i" t·ª©c l√† ko ph√¢n bi·ªát hoa th∆∞·ªùng
    if (search) {
      query.$or = [
        {
          title: {
            $regex: search,
            $options: "i",
          },
        },
      ];
    }
    if (status) {
      query.status = status;
    }

    if (option === CourseOptions.FREE) {
      query.price = 0;
    }
    // Latest (trong v√≤ng 15 ng√†y g·∫ßn nh·∫•t)
    if (option === CourseOptions.LATEST) {
      const now = new Date();
      const fifteenDaysAgo = new Date();

      fifteenDaysAgo.setDate(now.getDate() - 15);

      query.created_at = { $gte: fifteenDaysAgo };
    }

    const courses = await CourseModel.find(query)
      .skip(skip)
      .limit(limit)
      .sort({ created_at: -1 });

    console.log("üöÄcourses---->", courses);

    return JSON.parse(JSON.stringify(courses));
  } catch (error) {
    console.log("üöÄerror function fetchAllCoursesPublic ---->", error);
  }
}
// L·∫•y ra kho√° h·ªçc m√† user ƒë√£ mua
export async function fetchCourseOfUser(
  userId: string,
): Promise<CourseItemData[] | undefined> {
  try {
    connectToDatabase();
    const findUser = await UserModel.findOne({ clerkId: userId }).populate({
      path: "courses",
      model: CourseModel,
      match: {
        status: CourseStatus.APPROVED,
      },
      populate: {
        path: "lectures",
        model: LectureModel,
        select: "lessons",
        populate: {
          path: "lessons",
          model: LessonModel,
          select: "slug",
        },
      },
    });

    if (!findUser) return;

    return JSON.parse(JSON.stringify(findUser.courses));
  } catch (error) {
    console.log("üöÄerror getUserCourse ---->", error);
  }
}

// T·∫°o kho√° h·ªçc
export async function createCourse(params: CreateCourseParams) {
  try {
    connectToDatabase();
    // existCourse: slug t·ª´ params.slug truy·ªÅn v√†o, ƒë·ªÉ t√¨m xem kho√° h·ªçc ƒë√≥ ƒë√£ c√≥ slug ƒë√≥ ch∆∞a tr√°nh tr∆∞·ªùng h·ª£p b·ªã tr√πng slug.
    const existCourse = await CourseModel.findOne({ slug: params.slug });

    if (existCourse) {
      return {
        success: false,
        message: "ƒê∆∞·ªùng d·∫´n kho√° h·ªçc ƒë√£ t·ªìn t·∫°i",
      };
    }
    const newCourse = await CourseModel.create(params);

    return {
      success: true,
      data: JSON.parse(JSON.stringify(newCourse)),
      message: "T·∫°o kho√° h·ªçc th√†nh c√¥ng",
    };
  } catch (error) {
    console.log("üöÄerror function createCourse ---->", error);
  }
}
// S·ª≠a kho√° h·ªçc
export async function updateCourse(params: UpdateCourseParams) {
  try {
    connectToDatabase();
    // T√¨m kho√° h·ªçc tr∆∞·ªõc khi c·∫≠p nh·∫≠t kho√° h·ªçc
    const findCourse = await CourseModel.findOne({ slug: params.slug });

    if (!findCourse) return null;
    // C·∫≠p nh·∫≠t kho√° h·ªçc.
    // { slug: params.slug }: truy·ªÅn v√†o slug c·∫ßn c·∫≠p nh·∫≠t
    // params.updateData: Nh·ªØng d·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
    // new: true: m·ªói l·∫ßn c·∫≠p nh·∫≠t n√≥ s·∫Ω l∆∞u b·∫£n ghi m·ªõi nh·∫•t v√†o, n·∫øu ko c√≥ n√≥ s·∫Ω v·∫ßn l·∫•y c√°i tr∆∞·ªõc ƒë√≥.
    await CourseModel.findOneAndUpdate(
      { slug: params.slug },
      params.updateData,
      {
        new: true,
      },
    );
    // revalidatePath: khi c·∫≠p nh·∫≠t truy·ªÅn trang mu·ªën reload l·∫°i ra giao di·ªán
    revalidatePath("/");

    return {
      success: true,
      message: "C·∫≠p nh·∫≠t kho√° h·ªçc th√†nh c√¥ng",
    };
  } catch (error) {
    console.log("üöÄerror function updateCourse ---->", error);
  }
}
export async function deleteCourse(slug: string) {
  try {
    connectToDatabase();
    // T√¨m kho√° h·ªçc tr∆∞·ªõc khi c·∫≠p nh·∫≠t kho√° h·ªçc
    const findCourse = await CourseModel.findOne({ slug: slug });

    if (!findCourse) return null;
    // C·∫≠p nh·∫≠t kho√° h·ªçc.
    // { slug: params.slug }: truy·ªÅn v√†o slug c·∫ßn c·∫≠p nh·∫≠t
    // params.updateData: Nh·ªØng d·ªØ li·ªáu c·∫ßn c·∫≠p nh·∫≠t
    // new: true: m·ªói l·∫ßn c·∫≠p nh·∫≠t n√≥ s·∫Ω l∆∞u b·∫£n ghi m·ªõi nh·∫•t v√†o, n·∫øu ko c√≥ n√≥ s·∫Ω v·∫ßn l·∫•y c√°i tr∆∞·ªõc ƒë√≥.
    await CourseModel.findOneAndDelete({ slug: slug });
    // revalidatePath: khi c·∫≠p nh·∫≠t truy·ªÅn trang mu·ªën reload l·∫°i ra giao di·ªán
    revalidatePath("/manage/course");

    return {
      success: true,
      message: "C·∫≠p nh·∫≠t kho√° h·ªçc th√†nh c√¥ng",
    };
  } catch (error) {
    console.log("üöÄerror function updateCourse ---->", error);
  }
}

// updateCourseView: h√†m update m·ªói l·∫ßn truy c·∫≠p v√†o course slug s·∫Ω tƒÉng l√™n 1 view
export async function updateCourseView({ slug }: { slug: string }) {
  try {
    connectToDatabase();
    await CourseModel.findOneAndUpdate(
      { slug },
      {
        $inc: { views: 1 },
      },
    );
  } catch (error) {
    console.log("üöÄerror updateCourseView ---->", error);
  }
}

// getCourseLessonInfo: H√†m n√†y m·ª•c ƒë√≠ch ƒë·ªÉ l·∫•y ra th·ªùi l∆∞·ª£ng kho√° h·ªçc c√≥ trong b√†i h·ªçc
export async function getCourseLessonInfo({
  slug,
}: {
  slug: string;
}): Promise<CourseLessonData | undefined> {
  try {
    connectToDatabase();
    // course: n√†y l√† th√¥ng tin c·ªßa kho√° h·ªçc l·∫•y theo slug,
    //  .select("lectures"): l√† l·∫•y c·ª• th·ªÉ c√≤n n·∫øu ko c√≥ n√≥ s·∫Ω l·∫•y h·∫øt t·∫•t c·∫£
    // l·∫•y xong th√¨ select t·ªõi lectures v√† lessons ƒë·ªÉ l·∫•y ra ƒëc duration
    const course: CourseItemData = await CourseModel.findOne({ slug })
      .select("lectures")
      .populate({
        path: "lectures",
        model: LectureModel,
        select: "lessons",
        populate: {
          path: "lessons",
          model: LessonModel,
          select: "duration",
        },
      });
    // lessons: n√†y t·ª´ course.lectures map qua v√† l·∫•y ra m·ªôt m·∫£ng lesson v√† d√πng flat() ƒë·ªÉ l√†m ph·∫≥ng t·∫•t c·∫£ m·∫£ng
    // M·ª•c ƒë√≠ch l√†m ph·∫≥ng m·∫£ng l√† v√¨ ƒë·∫ª t√≠nh t·ªïng th·ªùi l∆∞·ª£ng, v√¨ trong m·ªói b√†i h·ªçc s·∫Ω c√≥ th·ªùi l∆∞·ª£ng. V√¨ v·∫≠y ph·∫£i l·∫•y ra v√† l√†m ph·∫≥ng m·∫£ng nh·∫≠p chung c√°c duration l·∫°i v·ªõi nhau ƒë·ªÉ d√πng h√†m reduce t√≠nh t·ªïng th·ªùi l∆∞·ª£ng c√°c b√†i h·ªçc.
    const lessons = course?.lectures.flatMap((lecture) => lecture.lessons);
    // duration: n√†y l·∫•y lessons v·ª´a l√†m ph·∫≥ng b√™n tr√™n d√πng reduce ƒë·ªÉ t√≠nh t·ªïng c√°c duration trong m·ªói b√†i h·ªçc ƒë√£ ƒëc l√†m ph·∫≥ng
    const duration =
      lessons.reduce(
        (accumulator: number, current) => accumulator + current.duration,
        0,
      ) || 0;

    return {
      duration,
      lessons: lessons.length,
    };
  } catch (error) {
    console.log("üöÄerror getCourseLessonInfo ---->", error);
  }
}

export async function fetchUserCoursesContinue({
  clerkId,
}: {
  clerkId: string;
}): Promise<CourseItemData[] | undefined> {
  try {
    connectToDatabase();
    const findUser = await UserModel.findOne({ clerkId: clerkId }).populate({
      path: "courses",
      model: CourseModel,
      match: {
        status: CourseStatus.APPROVED,
      },
      populate: {
        path: "lectures",
        model: LectureModel,
        select: "lessons",
        populate: {
          path: "lessons",
          model: LessonModel,
          select: "_id slug",
        },
      },
    });

    if (!findUser) return;

    return JSON.parse(JSON.stringify(findUser.courses));
  } catch (error) {
    console.log("üöÄerror getUserCourse ---->", error);
  }
}
