"use client";

import { debounce } from "lodash";
import { Dispatch, SetStateAction, useEffect, useState } from "react";
import { toast } from "react-toastify";

import { getValidateCoupon } from "@/modules/coupon/actions";
import { Input } from "@/shared/components/ui";
import { CouponType } from "@/shared/constants";

interface CouponFormProps {
  setCouponId: Dispatch<SetStateAction<string>>;
  originalPrice: number;
  setPrice: Dispatch<SetStateAction<number>>;
  courseId: string;
}
const CouponForm = ({
  courseId,
  originalPrice,
  setCouponId,
  setPrice,
}: CouponFormProps) => {
  // setCouponCode: state n√†y ƒë·ªÉ l∆∞u m√£ code ng d√πng nh·∫≠p v√†o input v√† g·ª≠i couponCode l√™n server s·ª≠ l√≠

  // setIsApplied: state n√†y ƒë·ªÉ l√†m tr·∫°ng th√°i disable n√∫t √°p d·ª•ng khi ƒë√£ √°p d·ª•ng code r·ªìi s·∫Ω ko √°p d·ª•ng ƒëc n·ªØa
  const [isApplied, setIsApplied] = useState(false);
  const [couponCode, setCouponCode] = useState("");

  // const inputRef = useRef<HTMLInputElement>(null);
  useEffect(() => {
    setIsApplied(false);
  }, [couponCode]);
  const handleApplyCoupon = async () => {
    if (isApplied) return;
    if (!couponCode) return;
    try {
      // response: tr·∫£ v·ªÅ th√¥ng tin c·ªßa coupon ƒë√≥
      const hasResult = await getValidateCoupon({
        code: couponCode.toUpperCase(),
        courseId,
      });
      // couponType: l√† percent hay amount
      const couponType = hasResult?.type;
      // finalPrice: l√† c√°i gi√° price hi·ªán t·∫°i g√°n v√†o
      let finalPrice = originalPrice;

      if (!hasResult) {
        toast.error("M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");
        setCouponCode("");
        setCouponId("");

        return;
      }
      // price: l√† s·ªë ti·ªÅn gi·∫£m gi√° khi t·∫°o coupon
      // N·∫øu couponType l√† percent b·∫±ng v·ªõi CouponType.PERCENT
      // Th√¨ l·∫•y gi√° ti·ªÅn hi·ªán t·∫°i - gi√° ti·ªÅn hi·ªán t·∫°i v√† nh√¢n cho gi√° ti·ªÅn g·ªëc trong db v√† chia cho 100 (t√≠nh ti·ªÅn khi √°p m√£ l√† %)
      //
      if (couponType === CouponType.PERCENT) {
        finalPrice = originalPrice - (originalPrice * hasResult?.value) / 100;
      } else if (couponType === CouponType.AMOUNT) {
        finalPrice = originalPrice - hasResult?.value;
      }
      setPrice(finalPrice);
      toast.success("√Åp d·ª•ng m√£ gi·∫£m gi√° th√†nh c√¥ng");
      setCouponCode("");
      // if (inputRef.current) inputRef.current.value = "";
      // inputRef.current?.value && (inputRef.current.value = "");
      setIsApplied(true);
      // setCouponId(response?._id): truy·ªÅn id c·ªßa coupon ƒë√≥ cho setCouponId b√™n file course-widget.tsx
      setCouponId(hasResult?._id);
    } catch (error) {
      console.log("üöÄerror handleApplyCoupon ---->", error);
    }
  };
  const handleChangeCoupon = debounce(
    (event: React.ChangeEvent<HTMLInputElement>) => {
      setCouponCode(event?.target.value);
    },
    300,
  );

  return (
    <div className="relative mt-5">
      <Input
        className="pr-24 font-bold uppercase"
        defaultValue={couponCode}
        placeholder="Nh·∫≠p m√£ gi·∫£m gi√°"
        onChange={handleChangeCoupon}
        // ref={inputRef}
      />
      <button
        className="absolute right-1 top-1/2 -translate-y-1/2 rounded bg-blue p-2 text-xs font-semibold text-white transition-all hover:bg-blue/20 hover:text-blue"
        onClick={handleApplyCoupon}
      >
        √Åp d·ª•ng
      </button>
    </div>
  );
};

export default CouponForm;
